import java.util.Vector;
import java.util.LinkedList;

public class Monitor {
    Vector <String> data;
    int wordCnt;
    int threadCnt;
    String outfile;

    int finishCnt;

    String[] sortedData;
    LinkedList<Vector<String>> results = new LinkedList<Vector<String>>();
    LinkedList<MyThread> threads = new LinkedList<MyThread>();

    Monitor (int wordCnt, Vector<String> data) {
	this.wordCnt = wordCnt;
	this.data = data;
    }

    public void startThreads() {
	for (int i = 0; i < threadCnt; i++) {
	    
	    int size = (((i + 1)*wordCnt)/threadCnt) + ((i*wordCnt)/threadCnt);
	    Vector<String> elements = new Vector<String>();
	    
	    for (int j = 0; j < size; j++) {
		elements.add(j, data.get(j));
		data.remove(j);
	    }
	    
	    threads.add(new MyThread(size, elements, i, this));
	    try {
		threads.get(0).join();
	    } catch (InterruptedException e) {
		System.out.println("Unexpected interruption");
		System.exit(0);
	    } 

	    threads.get(0).print();
	}
    }

    synchronized void addResultPiece(Vector<String> result) {
	results.add(result);
	finishCnt++;
    }

    public void mergeResults() {
	Vector<String> result = new Vector<String>();

	while (finishCnt != threadCnt) {
	    while (results.size() > 0) {
		result = merge2Vectors(result, results.get(0));
		results.remove(0);
	    }
	}
	
	while (results.size() > 0) {
	    result = merge2Vectors(result, results.get(0));
	    results.remove(0);
	}    
	
	String[] sortedArray = new String[this.wordCnt];
	sortedData = result.toArray(sortedArray);
	
	if (sortedData.length != wordCnt)
	    System.out.println("Result is incorrect");
	
	/**
	for (int i = 0; i < sortedData.length; i++) {
	    if (sortedData[i] == null) 
		System.out.println("One of the elements is null");
	    
	}
	**/	
    }

    private Vector<String> merge2Vectors(Vector<String> r, Vector<String> r2) {
	Vector<String> merged = new Vector<String>();

	while (r.size() > 0 && r2.size() > 0) {
	    String name = r.get(0);
	    String name2 = r2.get(0);
	    if (name.compareTo(name2) <= 0) {
		merged.add(name);
		r.remove(0);

	    } else {
		merged.add(name2);
		r2.remove(0);
	    }
	}

	while (r.size() > 0) {
	    merged.add(r.get(0));
	    r.remove(0);
	}

	while (r2.size() > 0) {
	    merged.add(r2.get(0));
	    r2.remove(0);
	}
	
	return merged;
    }
}